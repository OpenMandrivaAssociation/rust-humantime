diff -up humantime-2.1.0/Cargo.toml.omv~ humantime-2.1.0/Cargo.toml
--- humantime-2.1.0/Cargo.toml.omv~	2021-03-28 18:11:56.673527221 +0200
+++ humantime-2.1.0/Cargo.toml	2021-03-28 18:11:59.234519104 +0200
@@ -31,7 +31,7 @@ path = "src/lib.rs"
 version = "0.4"
 
 [dev-dependencies.rand]
-version = "0.6"
+version = "0.8"
 
 [dev-dependencies.time]
 version = "0.1"
diff -up humantime-2.1.0/src/date.rs.omv~ humantime-2.1.0/src/date.rs
--- humantime-2.1.0/src/date.rs.omv~	2021-03-28 18:13:31.978228605 +0200
+++ humantime-2.1.0/src/date.rs	2021-03-28 18:13:40.413202493 +0200
@@ -516,7 +516,7 @@ mod test {
         let upper = SystemTime::now().duration_since(UNIX_EPOCH).unwrap()
             .as_secs();
         for _ in 0..10000 {
-            let sec = rand::thread_rng().gen_range(0, upper);
+            let sec = rand::thread_rng().gen_range(0..upper);
             let (s, time) = from_sec(sec);
             assert_eq!(parse_rfc3339(&s).unwrap(), time);
             assert_eq!(format_rfc3339(time).to_string(), s);
@@ -526,7 +526,7 @@ mod test {
     #[test]
     fn random_wide_range() {
         for _ in 0..100_000 {
-            let sec = rand::thread_rng().gen_range(0, max::SECONDS);
+            let sec = rand::thread_rng().gen_range(0..max::SECONDS);
             let (s, time) = from_sec(sec);
             assert_eq!(parse_rfc3339(&s).unwrap(), time);
             assert_eq!(format_rfc3339(time).to_string(), s);
diff -up humantime-2.1.0/src/duration.rs.omv~ humantime-2.1.0/src/duration.rs
--- humantime-2.1.0/src/duration.rs.omv~	2021-03-28 18:13:12.090290365 +0200
+++ humantime-2.1.0/src/duration.rs	2021-03-28 18:13:23.075256218 +0200
@@ -397,7 +397,7 @@ mod test {
     #[test]
     fn random_second() {
         for _ in 0..10000 {
-            let sec = rand::thread_rng().gen_range(0, 253_370_764_800);
+            let sec = rand::thread_rng().gen_range(0..253_370_764_800);
             let d = Duration::new(sec, 0);
             assert_eq!(d,
                 parse_duration(&format_duration(d).to_string()).unwrap());
@@ -407,8 +407,8 @@ mod test {
     #[test]
     fn random_any() {
         for _ in 0..10000 {
-            let sec = rand::thread_rng().gen_range(0, 253_370_764_800);
-            let nanos = rand::thread_rng().gen_range(0, 1_000_000_000);
+            let sec = rand::thread_rng().gen_range(0..253_370_764_800);
+            let nanos = rand::thread_rng().gen_range(0..1_000_000_000);
             let d = Duration::new(sec, nanos);
             assert_eq!(d,
                 parse_duration(&format_duration(d).to_string()).unwrap());
